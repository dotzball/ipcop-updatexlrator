#!/usr/bin/perl
#
# This code is distributed under the terms of the GPL
#
# (c) 2006-2009 marco.s - http://update-accelerator.advproxy.net
#
# Portions (c) 2008 by dotzball - http://www.blockouttraffic.de
# Portions (c) 2012 by dotzball - http://www.blockouttraffic.de
#

use strict;
use HTTP::Date;

$|=1;

require '/var/ipcop/addons/updatexlrator/updxlrator-lib.pl';

my $updcachedir="/home/httpd/vhost81/html/updatecache";
my $apphome="/var/ipcop/addons/updatexlrator";
my $logfile="/var/log/updatexlrator/cache.log";
my $debug=(-e "$apphome/debug");
my $http_port='81';
my %netsettings=();
my %proxysettings=();
my %xlratorsettings=();
my $logging=0;
my $passive_mode=0;
my $maxusage=0;
my $nice='';
my @tmp=();
my $request='';
my $channelId='';
my $xlrator_url=0;
my $source_url='';
my $hostaddr='';
my $username='';
my $method='';
my $unique = 0;
my $mirror = 1;
my $redirectChain = 0;

&UPDXLT::readhash("/var/ipcop/ethernet/settings", \%netsettings);

if (-e "$apphome/settings")
{
    &UPDXLT::readhash("$apphome/settings", \%xlratorsettings);
    if ($xlratorsettings{'ENABLE_LOG'} eq 'on') { $logging=1; };
    if ($xlratorsettings{'PASSIVE_MODE'} eq 'on') { $passive_mode=1; };
    $maxusage=$xlratorsettings{'MAX_DISK_USAGE'};
    if ($xlratorsettings{'LOW_DOWNLOAD_PRIORITY'} eq 'on') { $nice='/bin/nice --adjustment=15 '; };
}
if (!$maxusage) { $maxusage=75; };


# dotzball: check for dead downloads
system("$apphome/bin/checkdeaddl &");

foreach my $arg (@ARGV) {
    if($arg eq "-f") {
        $redirectChain = 1;
    }
}
undef(@ARGV);

while (<>) {

    $request = $_;

    if($request =~ /^\d*\s*(ERR|OK|BH)/)
    {
        print "$request";
        next;
    }

    @tmp = split(/ /,$request);
    chomp(@tmp);

    my $id = 0;

    if($tmp[0] =~ /^\d+$/) {
        $channelId = $tmp[$id++]." ";
    }
    else {
        $channelId = '';
    }

    $source_url = $tmp[$id++];

    $hostaddr   = $tmp[$id++];
    while ($hostaddr =~ /.*\/$/) {
        chop $hostaddr;
    }

    $username   = $tmp[$id++];
    if ($username eq '') {
        $username='-';
    }

    $method     = $tmp[$id++];

    $xlrator_url = $source_url;

    if (($method eq 'GET') || ($method eq 'HEAD'))
    {

    # -----------------------------------------------------------
    #  Section: Windows Update / Windows Downloads
    # -----------------------------------------------------------

    if (
        (($source_url =~ m@^http://[^/]*\.microsoft\.com/.*\.(exe|psf|msi|msp|msu|dmg|cab)$@i) ||
         ($source_url =~ m@^http://[^/]*\.windowsupdate\.com/.*\.(exe|psf|msi|msp|msu|dmg|cab)$@i))
    &&   ($source_url !~ m@^http://[^/]*\.microsoft\.com/.*(/autoupd|selfupdate/).*\.cab@i)
    &&   ($source_url !~ m@\&@)
       )
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Microsoft",$unique);
    }

    # -----------------------------------------------------------
    #  Section: Adobe Downloads
    # -----------------------------------------------------------

    if (
        ($source_url =~ m@^http://(ar)?download\.adobe\.com/.*\.(exe|msi|bin|dmg|idx|gz)$@i) ||
        ($source_url =~ m@^http://swupdl\.adobe\.com/updates/.*\.(exe|msi|bin|dmg|idx|gz|[a-z][a-z]_[A-Z][A-Z])$@i) ||
        ($source_url =~ m@^http://armdl\.adobe\.com/.*\.(exe|msi|msp|bin|dmg|idx|gz)$@i) ||
        ($source_url =~ m@^http://swupmf\.adobe\.com/manifest/.*\.upd$@i)
       )
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Adobe",$unique);
    }

    # -----------------------------------------------------------
    #  Section: Linux Downloads
    # -----------------------------------------------------------

    if ($source_url =~ m@^[h|f]t?tp://[^?]+\.(deb|rpm)$@i)
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Linux",$mirror);
    }

    # -----------------------------------------------------------
    #  Section: Trend Micro Downloads
    # -----------------------------------------------------------

    if (
        ($source_url =~ m@^http://[^/]*\.trendmicro\.com/activeupdate/.*@i) &&
        ($source_url !~ m@.*/tmnotify\.dat$@i) &&
        ($source_url !~ m@.*/ini_xml\.zip$@i) &&
        ($source_url !~ m@.*/server\.ini$@i)
       )
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"TrendMicro",$mirror);
    }

    # -----------------------------------------------------------
    #  Section: Symantec Downloads
    # -----------------------------------------------------------

    if ($source_url =~ m@^[h|f]tt?p://[^/]*\.symantec(liveupdate)?\.com/.*\.(exe|zip|vdb|xdb)$@i)
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Symantec",$unique);
    }

    # -----------------------------------------------------------
    #  Section: Mozilla Downloads
    # -----------------------------------------------------------

    if ($source_url =~ m@^[h|f]tt?p://[^/]*\.mozilla\.org/.*\.(exe|zip|tar)$@i)
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Other",$unique);
    }

    # -----------------------------------------------------------
    #  Section: NVIDIA Downloads
    # -----------------------------------------------------------

    if ($source_url =~ m@^http://[^/]+\.download.nvidia.com/.*\.(exe|zip)$@i)     {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Other",$unique);
    }


    # -----------------------------------------------------------
    #  Section: Apple Downloads
    # -----------------------------------------------------------

    if (
        (($source_url =~ m@^http://swcdn\.apple\.com/content/downloads/.*\.(tar|pkg)$@i) ||
         ($source_url =~ m@^http://appldnld\.apple\.com\.edgesuite\.net/.*\.(exe|dmg)$@i) ||
	  ($source_url =~ m@^[h|f]tt?p://[^/]*\.apple\.com/.*\.(pfpkg|tar|pkg|dmg|exe)$@i) ||
         ($source_url =~ m@^http://.*\.g.akamai.net/.*/3093/1/.*\.(tar|pkg|dmg|exe)$@i))
       )
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Apple",$unique);
    }

    # -----------------------------------------------------------
    #  Section: Avast Downloads
    # -----------------------------------------------------------

    if ($source_url =~ m@^http://download[\d]*\.avast\.com/.*\.(exe|vpu)$@i)
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Avast",$mirror);
    }


    # -----------------------------------------------------------
    #  Section: Java  Downloads
    # -----------------------------------------------------------

    if (($source_url =~ m@^http://[^/]*\.java\.com/.*\.(exe|zip)$@i) ||
	  ($source_url =~ m@^http://[^/]*\.sun\.com/.*\.(exe|zip)$@i))
    {
        $xlrator_url = &check_cache($source_url,$hostaddr,$username,"Other",$unique);
    }



    # -----------------------------------------------------------

    }

    if($xlrator_url eq $source_url)
    {
        # Nothing changed/no redirect
        if($redirectChain)
        {
            # There are more redirectors to come, print original request
            $request = "$source_url $hostaddr $username $method";
        }
        else
        {
            # No more redirectors to come, print answer in squid format
            $request = "ERR";
        }
    }
    else
    {
        # Found a redirect, print answer always(!) in squid format
        $request = "OK rewrite-url=\"$xlrator_url\"";
    }

    print "$channelId$request\n";
}

# -------------------------------------------------------------------


sub writelog
{
    if ($logging)
    {
        open(LOGFILE,">>$logfile");
        print LOGFILE time." $_[0] $_[1] $_[2] $_[3] $_[4] $_[5] $_[6]\n";
        close(LOGFILE);
    }
}

# -------------------------------------------------------------------

sub debuglog
{
    if ($debug)
    {
        open(LOGFILE,">>/var/log/updatexlrator/debug.log");
        my @now = localtime(time);
        printf LOGFILE "%04d-%02d-%02d %02d:%02d:%02d [%d] [%s] %s\n",$now[5]+1900,$now[4]+1,$now[3],$now[2],$now[1],$now[0],$$,"updxlrator",$_[0];
        close(LOGFILE);
    }
}

# -------------------------------------------------------------------

sub setcachestatus
{
    open (FILE,">>$_[0]");
    print FILE "$_[1]\n";
    close FILE;
}

# -------------------------------------------------------------------

sub check_cache
{
    my $updsource="UPDCACHE";
    my $updfile='';
    my $cacheurl='';
    my $vendorid='';
    my $uuid='';
    my @http_header=();
    my $remote_size=0;
    my $remote_mtime=0;
    my $login='';
    my $useragent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)";

    my $sourceurl=$_[0];
    my $cfmirror=$_[4];

    $sourceurl =~ s@\%2b@+@ig;
    $sourceurl =~ s@\%2f@/@ig;
    $sourceurl =~ s@\%7e@~@ig;
    $updfile = substr($sourceurl,rindex($sourceurl,"/")+1);
    $updfile =~ s@\%20@ @ig;

    if ($cfmirror)
    {
        $uuid = `echo $updfile | md5sum`;
    } else {
        $uuid = `echo $sourceurl | md5sum`;
    }

    $uuid =~ s/[^0-9a-f]//g;
    $uuid =~ s/([a-f\d]{8})([a-f\d]{4})([a-f\d]{4})([a-f\d]{4})([a-f\d]{12})/$1-$2-$3-$4-$5/;

    $vendorid = $_[3];
    $vendorid =~ tr/A-Z/a-z/;

    &debuglog("[$_[1]] Processing URL $sourceurl");
    &debuglog("[$_[1]] Vendor ID is $vendorid");
    &debuglog("[$_[1]] UUID is $uuid");

    if (($proxysettings{'UPSTREAM_PROXY'}) && ($proxysettings{'UPSTREAM_USER'}))
    {
        $login = "--proxy-user=\"$proxysettings{'UPSTREAM_USER'}\"";
        if ($proxysettings{'UPSTREAM_PASSWORD'})
        {
            $login .= " --proxy-password=\"$proxysettings{'UPSTREAM_PASSWORD'}\"";
        }
    }

    if ($proxysettings{'UPSTREAM_PROXY'}) { &debuglog("Using upstream proxy $proxysettings{'UPSTREAM_PROXY'}"); }

    $ENV{'http_proxy'} = $proxysettings{'UPSTREAM_PROXY'};
    @http_header = `/usr/bin/wget $login --user-agent="$useragent" --spider -S $sourceurl 2>&1`;
    $ENV{'http_proxy'} = '';

    foreach (@http_header)
    {
        chomp;
        if (/^\s*Content-Length:\s/) { $remote_size = $_; $remote_size =~ s/[^0-9]//g; }
        if (/^\s*Last-Modified:\s/) { $remote_mtime = $_; $remote_mtime =~ s/^\s*Last-Modified:\s//; $remote_mtime = HTTP::Date::str2time($remote_mtime) }
    }

    if (
        (-e "$updcachedir/$vendorid/$uuid/$updfile") &&
        ($remote_size == (-s "$updcachedir/$vendorid/$uuid/$updfile")) &&
        ($remote_mtime == &UPDXLT::getmtime("$updcachedir/$vendorid/$uuid/$updfile"))
       )
    {
        &debuglog("[$_[1]] File exists in cache and is up to date");
        &debuglog("[$_[1]] Retrieving file from cache ($updsource)");
        &setcachestatus("$updcachedir/$vendorid/$uuid/access.log",time);
        system("$apphome/bin/setperms $vendorid/$uuid/access.log");
        $cacheurl="http://$netsettings{'GREEN_1_ADDRESS'}:$http_port/updatecache/$vendorid/$uuid/$updfile";
    }
        else
    {
        if (-e "$updcachedir/$vendorid/$uuid/$updfile")
        {
            &debuglog("Local filesize: " . (-s "$updcachedir/$vendorid/$uuid/$updfile"));
            &debuglog("Local timestamp: " . &UPDXLT::getmtime("$updcachedir/$vendorid/$uuid/$updfile"));
        } else { &debuglog("File not found in cache"); }
        $updsource="DLSOURCE";
        &debuglog("[$_[1]] Remote filesize:  $remote_size");
        &debuglog("[$_[1]] Remote timestamp: $remote_mtime");
        &debuglog("[$_[1]] Free disk space:  " . &UPDXLT::diskfree($updcachedir));
        &debuglog("[$_[1]] Disk usage: " . &UPDXLT::diskusage($updcachedir) . "% (max. $maxusage%)");
        if (-e "$updcachedir/download/$vendorid/$updfile") { &debuglog("File download/$vendorid/$updfile exists"); }
        &debuglog("[$_[1]] Retrieving file from source ($updsource)");
        &debuglog("[$_[1]] Passive_Mode: $passive_mode");

        if ((!$passive_mode) && (&UPDXLT::diskusage($updcachedir) <= $maxusage) && ($remote_size <= &UPDXLT::diskfree($updcachedir)) && (!-e "$updcachedir/download/$vendorid/$updfile"))
        {
            &debuglog("[$_[1]] Running command $nice$apphome/bin/download $vendorid $sourceurl $cfmirror &");
            system("$nice$apphome/bin/download $vendorid $sourceurl $cfmirror &");
        }
        $cacheurl=$sourceurl;
    }

    &writelog($_[1], $_[2],$_[3],$updsource,$sourceurl,$remote_size);

    return $cacheurl;
}
